import React, { useEffect, useState } from 'react';
import {
    Container,
    Paper,
    Typography,
    Box,
    Stack,
    Button,
    Divider,
    Chip,
    Snackbar,
    Alert,
    Grid,
    CircularProgress,
} from '@mui/material';
import axios from 'axios';
import dayjs from 'dayjs';
import { useNavigate } from 'react-router-dom';

export default function WorkerFeedbackPage() {
    const [feedbacks, setFeedbacks] = useState([]);
    const [vacancies, setVacancies] = useState({});
    const [loading, setLoading] = useState(true);
    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
    const navigate = useNavigate();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
    const fetchFeedbacks = async () => {
        try {
            const token = localStorage.getItem('jwt');
            const res = await axios.get('https://localhost:7106/api/v1/Worker/GetFeedback',  {
                headers: { Authorization: `Bearer ${token}` },
            });

            setFeedbacks(res.data.feedbacks || []);
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∫–ª–∏–∫–æ–≤:', err);
            setSnackbar({
                open: true,
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∫–ª–∏–∫–æ–≤',
                severity: 'error',
            });
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
    const fetchVacancyInfo = async (vacancyId) => {
        try {
            const token = localStorage.getItem('jwt');
            const res = await axios.get(`https://localhost:7106/api/v1/Worker/Vacancies/Info`,  {
                headers: { Authorization: `Bearer ${token}` },
                params: { vacancyId: vacancyId },
            });

            setVacancies((prev) => ({
                ...prev,
                [vacancyId]: res.data.vacancy?.[0] || null,
            }));
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏:', err);
            setVacancies((prev) => ({
                ...prev,
                [vacancyId]: null,
            }));
        }
    };

    // –ò–Ω–∏—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    useEffect(() => {
        const fetchData = async () => {
            await Promise.all([fetchFeedbacks()]);
            setLoading(false);
        };
        fetchData();
    }, []);

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
    useEffect(() => {
        feedbacks.forEach(fb => {
            if (!vacancies[fb.vacancy_id]) {
                fetchVacancyInfo(fb.vacancy_id);
            }
        });
    }, [feedbacks]);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    const formatDate = (date) => dayjs(date).format('DD.MM.YYYY');

    // –ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏
    const handleOpenVacancyDetails = (vacancyId) => {
        navigate(`/Worker/Vacancies/Info/${vacancyId}`);
    };

    const handleDeleteVacancy = async (id) => {
        try {
            const token = localStorage.getItem('jwt');
            await axios.delete(`https://localhost:7106/api/v1/Worker/DeleteFeedback`,  {
                params: { id: id },
                headers: { Authorization: `Bearer ${token}` },
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setFeedbacks((prev) => prev.filter((v) => v.id !== id));

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            setSnackbar({
                open: true,
                message: '–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!',
                severity: 'success',
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ—Ç–∫–ª–∏–∫–∞:', err);
            setSnackbar({
                open: true,
                message: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç–∫–ª–∏–∫',
                severity: 'error',
            });
        }
    };

    if (loading) {
        return (
            <Box sx={{ p: 3, textAlign: 'center' }}>
                <CircularProgress />
                <Typography variant="h6" sx={{ mt: 2 }}>–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤...</Typography>
            </Box>
        );
    }

    return (
        <Container maxWidth="lg" sx={{ py: 6 }}>
            <Typography variant="h4" fontWeight="bold" gutterBottom align="center">
                –ú–æ–∏ –æ—Ç–∫–ª–∏–∫–∏
            </Typography>

            {feedbacks.length === 0 ? (
                <Paper elevation={3} sx={{ p: 4, bgcolor: '#fff3cd', mb: 3, borderRadius: 3 }}>
                    <Typography align="center" color="text.secondary">
                        –í—ã –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞.
                    </Typography>
                    <Button
                        fullWidth
                        variant="contained"
                        color="primary"
                        onClick={() => navigate('/Worker/Vacancies')}
                        sx={{ mt: 2, py: 1.5 }}
                    >
                        –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                    </Button>
                </Paper>
            ) : (
                <Stack spacing={3}>
                    {feedbacks.map(feedback => {
                        const vacancy = vacancies[feedback.vacancy_id];
                        const statusText =
                            feedback.status === 0
                                ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ'
                                : feedback.status === 1
                                    ? '–ü—Ä–∏–Ω—è—Ç–æ'
                                    : feedback.status === 2
                                        ? '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ'
                                        : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
                        const statusColor =
                            feedback.status === 0
                                ? 'warning'
                                : feedback.status === 1
                                    ? 'success'
                                    : feedback.status === 2
                                        ? 'error'
                                        : 'default';

                        return (
                            <Paper key={feedback.id} elevation={3} sx={{ p: 3, borderRadius: 3 }}>
                                <Grid container spacing={3}>
                                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ */}
                                    <Grid item xs={12} md={5}>
                                        <Typography variant="h6" fontWeight="bold">üìå –í–∞–∫–∞–Ω—Å–∏—è</Typography>
                                        <Divider sx={{ my: 1 }} />

                                        {vacancy ? (
                                            <>
                                                <Typography><strong>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</strong> {vacancy.post}</Typography>
                                                <Typography><strong>–ö–æ–º–ø–∞–Ω–∏—è:</strong> {vacancy.company.name}</Typography>
                                                <Typography><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {vacancy.description}</Typography>
                                                <Typography><strong>–ó–∞—Ä–ø–ª–∞—Ç–∞:</strong> {vacancy.min_salary} ‚Äî {vacancy.max_salary ?? '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'} ‚ÇΩ</Typography>
                                                <Typography><strong>–û–ø—ã—Ç:</strong> {vacancy.experience} –ª–µ—Ç</Typography>
                                                <Typography><strong>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</strong> ID {vacancy.education_id}</Typography>
                                            </>
                                        ) : (
                                            <Box>
                                                <Typography color="text.secondary">–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏...</Typography>
                                                <Button size="small" onClick={() => fetchVacancyInfo(feedback.vacancy_id)}>
                                                    –ó–∞–≥—Ä—É–∑–∏—Ç—å
                                                </Button>
                                            </Box>
                                        )}
                                    </Grid>

                                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—é–º–µ */}
                                    <Grid item xs={12} md={5}>
                                        <Typography variant="h6" fontWeight="bold">üìÑ –†–µ–∑—é–º–µ</Typography>
                                        <Divider sx={{ my: 1 }} />

                                        <Typography><strong>–ì–æ—Ä–æ–¥:</strong> {feedback.city}</Typography>
                                        <Typography><strong>–û–ø—ã—Ç:</strong> {feedback.experience} –ª–µ—Ç</Typography>
                                        <Typography><strong>–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</strong> {feedback.wantedSalary} ‚ÇΩ</Typography>
                                        <Typography><strong>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</strong> {formatDate(feedback.income_date)}</Typography>

                                        <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                                            {feedback.activities?.map(act => (
                                                <Chip
                                                    key={act.id}
                                                    label={act.direction}
                                                    sx={{
                                                        bgcolor: '#e3f2fd',
                                                        color: '#1976d2',
                                                    }}
                                                />
                                            ))}
                                        </Box>
                                    </Grid>

                                    {/* –°—Ç–∞—Ç—É—Å –∏ –¥–µ–π—Å—Ç–≤–∏—è */}
                                    <Grid item xs={12} md={2}>
                                        <Typography variant="h6" fontWeight="bold">–°—Ç–∞—Ç—É—Å</Typography>
                                        <Divider sx={{ my: 1 }} />
                                        <Chip
                                            label={statusText}
                                            color={statusColor}
                                            sx={{ mb: 2 }}
                                        />
                                        <Button
                                            variant="contained"
                                            color="info"
                                            fullWidth
                                            onClick={() => handleOpenVacancyDetails(feedback.vacancy_id)}
                                            sx={{ py: 1.2 }}
                                        >
                                            –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                        </Button>
                                        { feedback.status === 0 && (
                                        <Button
                                            size="small"
                                            color="error"
                                            onClick={() => handleDeleteVacancy(feedback.id)}
                                        >
                                            –û—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–∫–ª–∏–∫
                                        </Button>)
                                        }
                                    </Grid>
                                </Grid>
                            </Paper>
                        );
                    })}
                </Stack>
            )}

            {/* Snackbar */}
            <Snackbar open={snackbar.open} autoHideDuration={3000} onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}>
                <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
            </Snackbar>
        </Container>
    );
}