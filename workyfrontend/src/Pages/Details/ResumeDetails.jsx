import React, { useEffect, useState } from 'react';
import {
    Container,
    Paper,
    Typography,
    Box,
    Stack,
    Button,
    Divider,
    Chip,
    Snackbar,
    Alert,
    CircularProgress,
    TextField,
    FormControl,
    InputLabel,
    Select,
    MenuItem,
    Avatar,
    Grid,
} from '@mui/material';
import axios from 'axios';
import dayjs from 'dayjs';
import { useNavigate, useParams } from 'react-router-dom';

export default function ResumeDetailsPage() {
    const [resume, setResume] = useState(null);
    const [vacancies, setVacancies] = useState([]);
    const [educationList, setEducationList] = useState([]);
    const [selectedVacancyId, setSelectedVacancyId] = useState('');
    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    const { resumeId } = useParams();

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–∑—é–º–µ
    useEffect(() => {
        const fetchData = async () => {
            try {
                const token = localStorage.getItem('jwt');
                const [resumeResponse, vacanciesResponse, educationResponse] = await Promise.all([
                    axios.get(`https://localhost:7106/api/v1/Company/Resumes/Info`, {
                        headers: { Authorization: `Bearer ${token}` },
                        params: {
                            resumeId: resumeId,
                        }
                    }),
                    axios.get('https://localhost:7106/api/v1/Company/MyVacancy', {
                        headers: { Authorization: `Bearer ${token}` },
                    }),
                    axios.get('https://localhost:7106/api/v1/GetInfo/Education', {
                        headers: { Authorization: `Bearer ${token}` },
                    }),
                ]);

                setResume(resumeResponse.data.resume?.[0] || null);
                setVacancies(vacanciesResponse.data || []);
                setEducationList(educationResponse.data.education || []);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                setSnackbar({
                    open: true,
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑—é–º–µ',
                    severity: 'error'
                });
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [resumeId]);

    const getEducationName = (id) =>
        educationList.find(edu => edu.id === id)?.name || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';

    const handleRespond = async () => {
        if (!selectedVacancyId) return;
        try {
            const token = localStorage.getItem('jwt');
            await axios.post('https://localhost:7106/api/v1/Company/MakeFeedback', {
                resume_id: resume.id,
                vacancy_id: selectedVacancyId
            }, {
                headers: {
                    Authorization: `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            setSnackbar({
                open: true,
                message: '–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
                severity: 'success'
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞:', err.response?.data || err.message);
            setSnackbar({
                open: true,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞',
                severity: 'error'
            });
        }
    };

    if (loading) {
        return (
            <Box sx={{ p: 3, textAlign: 'center' }}>
                <CircularProgress />
                <Typography variant="h6" sx={{ mt: 2 }}>–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∑—é–º–µ...</Typography>
            </Box>
        );
    }

    if (!resume) {
        return (
            <Container maxWidth="sm" sx={{ py: 6 }}>
                <Paper elevation={3} sx={{ p: 4, borderRadius: 3 }}>
                    <Typography align="center" color="text.secondary">
                        –†–µ–∑—é–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
                    </Typography>
                    <Button fullWidth onClick={() => navigate('/Company/Resumes')} sx={{ mt: 2 }}>
                        –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
                    </Button>
                </Paper>
            </Container>
        );
    }

    const worker = resume.worker;
    const workerName = `${worker.second_name} ${worker.first_name} ${worker.surname}`;

    return (
        <Container maxWidth="lg" sx={{ py: 6 }}>
            <Typography variant="h4" fontWeight="bold" gutterBottom align="center">
                –†–µ–∑—é–º–µ: {resume.post || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
            </Typography>

            <Grid container spacing={3}>
                {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç–Ω–∏–∫–∞ */}
                <Grid item xs={12} md={4}>
                    <Paper elevation={3} sx={{
                        p: 3,
                        borderRadius: 3,
                        bgcolor: '#f9f9f9',
                        mb: 3
                    }}>
                        <Stack spacing={2} alignItems="center">
                            <Typography variant="h6" fontWeight="bold">–ö–∞–Ω–¥–∏–¥–∞—Ç</Typography>
                            <Divider sx={{ width: '100%' }} />

                            {/* –§–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è */}
                            <Box>
                                {worker.image ? (
                                    <Avatar
                                        src={`data:image/jpeg;base64,${btoa(String.fromCharCode.apply(null, new Uint8Array(worker.image)))}`}
                                        alt="–§–æ—Ç–æ"
                                        sx={{ width: 120, height: 120 }}
                                    />
                                ) : (
                                    <Avatar sx={{ width: 120, height: 120, bgcolor: '#ccc', color: '#666' }}>
                                        üì∑
                                    </Avatar>
                                )}
                            </Box>

                            <Typography variant="h5" align="center" fontWeight="bold">
                                {workerName}
                            </Typography>

                            {/*<Typography variant="body2" align="center" color="text.secondary">*/}
                            {/*    Email: {worker.email || '‚Äî'}*/}
                            {/*</Typography>*/}

                            {/*<Typography variant="body2" align="center" color="text.secondary">*/}
                            {/*    –¢–µ–ª–µ—Ñ–æ–Ω: {worker.phoneNumber || '‚Äî'}*/}
                            {/*</Typography>*/}
                            <Typography variant="body2" align="center" color="text.secondary">
                                –í–æ–∑—Ä–∞—Å—Ç: {worker.age || '‚Äî'}
                            </Typography>

                            <Typography variant="body2" align="center" color="text.secondary">
                                –ì–æ—Ä–æ–¥: {resume.city || '‚Äî'}
                            </Typography>
                        </Stack>
                    </Paper>
                </Grid>

                {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—é–º–µ */}
                <Grid item xs={12} md={8}>
                    <Paper elevation={3} sx={{
                        p: 3,
                        borderRadius: 3,
                        mb: 3
                    }}>
                        <Stack spacing={2}>
                            <Typography variant="h5" fontWeight="bold">
                                –î–æ–ª–∂–Ω–æ—Å—Ç—å: {resume.post || 'Junior Frontend Developer'}
                            </Typography>
                            <Divider />

                            <Box display="flex" justifyContent="space-between" flexWrap="wrap">
                                <Box>
                                    <Typography><strong>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</strong> {resume.experience} –ª–µ—Ç</Typography>
                                    <Typography><strong>–ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞:</strong> {resume.wantedSalary} ‚ÇΩ</Typography>
                                    <Typography><strong>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</strong> {getEducationName(resume.education_id)}</Typography>
                                    <Typography><strong>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</strong> {dayjs(resume.income_date).format('DD.MM.YYYY')}</Typography>
                                </Box>

                                <Box>
                                    <FormControl fullWidth sx={{ minWidth: 200 }}>
                                        <InputLabel id="vacancy-select-label">–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é</InputLabel>
                                        <Select
                                            labelId="vacancy-select-label"
                                            value={selectedVacancyId}
                                            onChange={(e) => setSelectedVacancyId(e.target.value)}
                                            label="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–∫–∞–Ω—Å–∏—é"
                                        >
                                            {vacancies.map(vacancy => {
                                                const salaryDisplay = vacancy.max_salary
                                                    ? `${vacancy.min_salary} - ${vacancy.max_salary}`
                                                    : vacancy.min_salary;

                                                return (
                                                    <MenuItem key={vacancy.id} value={vacancy.id}>
                                                        <Box>
                                                            <Typography variant="body2" fontWeight="bold">{vacancy.post}</Typography>
                                                            <Typography variant="caption">–ó–∞—Ä–ø–ª–∞—Ç–∞: {salaryDisplay} ‚ÇΩ</Typography>
                                                            <Typography variant="caption">–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {getEducationName(vacancy.education_id)}</Typography>
                                                            <Typography variant="caption">–û–ø—ã—Ç: {vacancy.experience || '‚Äî'}</Typography>
                                                        </Box>
                                                    </MenuItem>
                                                );
                                            })}
                                        </Select>
                                    </FormControl>

                                    <Button
                                        variant="contained"
                                        color="primary"
                                        fullWidth
                                        disabled={!selectedVacancyId}
                                        onClick={handleRespond}
                                        sx={{ mt: 2, py: 1.2 }}
                                    >
                                        –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                                    </Button>
                                </Box>
                            </Box>
                        </Stack>
                    </Paper>

                    {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
                    <Paper elevation={3} sx={{
                        p: 3,
                        borderRadius: 3,
                        mb: 3
                    }}>
                        <Typography variant="h6" fontWeight="bold" gutterBottom>
                            –§–∏–ª—å—Ç—Ä—ã
                        </Typography>
                        <Box display="flex" flexWrap="wrap" gap={1}>
                            {resume.activities?.map(act => (
                                <Chip
                                    key={act.id}
                                    label={act.direction}
                                    sx={{
                                        bgcolor: '#e3f2fd',
                                        color: '#1976d2'
                                    }}
                                />
                            ))}
                        </Box>
                    </Paper>

                    {/* –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ */}
                    <Paper elevation={3} sx={{
                        p: 3,
                        borderRadius: 3,
                        mb: 3
                    }}>
                        <Typography variant="h6" fontWeight="bold" gutterBottom>
                            –û–ø–∏—Å–∞–Ω–∏–µ
                        </Typography>
                        <Divider sx={{ mb: 2 }} />
                        <Typography variant="body1" whiteSpace="pre-line" sx={{ textAlign: 'left' }}>
                            {resume.skill}
                        </Typography>
                    </Paper>
                </Grid>
            </Grid>

            <Button variant="outlined" onClick={() => navigate(-1)} sx={{ mt: 2 }}>
                –ù–∞–∑–∞–¥
            </Button>

            {/* Snackbar */}
            <Snackbar open={snackbar.open} autoHideDuration={3000} onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}>
                <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
            </Snackbar>
        </Container>
    );
}