import React, { useEffect, useState } from 'react';
import {
    Container,
    Paper,
    Typography,
    Box,
    Stack,
    Button,
    Divider,
    Chip,
    CircularProgress,
    Snackbar,
    Alert, FormControl, InputLabel, Select, MenuItem
} from '@mui/material';
import axios from 'axios';
import dayjs from 'dayjs';
import { useNavigate, useParams } from 'react-router-dom';

export default function VacancyDetailsPage() {
    const [vacancy, setVacancy] = useState(null);
    const [loading, setLoading] = useState(true);
    const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
    const [userRole, setUserRole] = useState(null); // –†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [educationList, setEducationList] = useState([]); // –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
    const navigate = useNavigate();
    const { vacancyId } = useParams();

    const [myResumes, setMyResumes] = useState([]);
    const [selectedResume, setSelectedResume] = useState('');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const fetchData = async () => {
            try {
                const token = localStorage.getItem('jwt');
                if (!token) {
                    navigate('/login');
                    return;
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const role = localStorage.getItem('role');
                setUserRole(role);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏
                const vacancyResponse = await axios.get(`https://localhost:7106/api/v1/Worker/Vacancies/Info`, {
                    headers: { Authorization: `Bearer ${token}` },
                    params: { vacancyId }
                });

                setVacancy(vacancyResponse.data.vacancy?.[0] || null);

                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π
                const educationResponse = await axios.get('https://localhost:7106/api/v1/GetInfo/Education', {
                    headers: { Authorization: `Bearer ${token}` },
                });

                setEducationList(educationResponse.data.education || []);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö:', err);
                setSnackbar({
                    open: true,
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è',
                    severity: 'error'
                });
            } finally {
                setLoading(false);
            }
        };

        fetchData();
    }, [vacancyId]);

    useEffect(() => {
        const fetchMyResumes = async () => {
            try {
                const token = localStorage.getItem('jwt');
                const response = await axios.get('https://localhost:7106/api/v1/Worker/MyResume',  {
                    headers: { Authorization: `Bearer ${token}` },
                });
                setMyResumes(response.data || []);
            } catch (err) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∑—é–º–µ:', err);
                setSnackbar({
                    open: true,
                    message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–∞—à–∏ —Ä–µ–∑—é–º–µ',
                    severity: 'error'
                });
            }
        };

        fetchMyResumes();
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ ID
    const getEducationName = (id) => {
        const education = educationList.find(edu => edu.id === id);
        return education ? education.name : '–Ω–µ —É–∫–∞–∑–∞–Ω–æ';
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∫–ª–∏–∫–∞
    const handleRespond = async (selectedResume, vacancyId) => {
        if (!selectedResume || !vacancyId) return;

        try {
            const token = localStorage.getItem('jwt');
            await axios.post(
                'https://localhost:7106/api/v1/Worker/MakeFeedback',
                {
                    resume_id: selectedResume,
                    vacancy_id: vacancyId
                },
                {
                    headers: {
                        Authorization: `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                }
            );
            setSnackbar({
                open: true,
                message: '–û—Ç–∫–ª–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
                severity: 'success'
            });
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞:', err.response?.data || err.message);
            setSnackbar({
                open: true,
                message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–∫–ª–∏–∫–∞',
                severity: 'error'
            });
        }
    };
    if (loading) {
        return (
            <Box sx={{ p: 3, textAlign: 'center' }}>
                <CircularProgress />
                <Typography variant="h6" sx={{ mt: 2 }}>–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏...</Typography>
            </Box>
        );
    }

    if (!vacancy) {
        return (
            <Container maxWidth="sm" sx={{ py: 6 }}>
                <Paper elevation={3} sx={{ p: 4, borderRadius: 3 }}>
                    <Typography align="center" color="text.secondary">
                        –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.
                    </Typography>
                    <Button fullWidth onClick={() => navigate(-1)} sx={{ mt: 2 }}>
                        –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
                    </Button>
                </Paper>
            </Container>
        );
    }

    const salaryDisplay = vacancy.max_salary
        ? `${vacancy.min_salary} ‚Äî ${vacancy.max_salary}`
        : vacancy.min_salary;

    return (
        <Container maxWidth="lg" sx={{ py: 6 }}>
            <Paper elevation={3} sx={{ p: 3, mb: 4, borderRadius: 3 }}>
                <Box display="flex" justifyContent="space-between" gap={3}>
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏ */}
                    <Box sx={{
                        flex: 1,
                        minWidth: 200,
                        borderRight: '1px solid #ccc',
                        pr: 2,
                        mr: 2
                    }}>
                        <Typography variant="h6" fontWeight="bold">–ö–æ–º–ø–∞–Ω–∏—è</Typography>
                        <Divider sx={{ my: 1 }} />
                        <Typography><strong>–ù–∞–∑–≤–∞–Ω–∏–µ:</strong> {vacancy.company?.name}</Typography>
                        <Typography><strong>Email:</strong> {vacancy.company?.email || '‚Äî'}</Typography>
                        <Typography><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> {vacancy.company?.phoneNumber || '‚Äî'}</Typography>
                        <Typography><strong>–°–∞–π—Ç:</strong> {vacancy.company?.website || '‚Äî'}</Typography>
                        <Typography><strong>–ê–¥—Ä–µ—Å:</strong> {vacancy.company?.latitude}, {vacancy.company?.longitude}</Typography>
                    </Box>

                    {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–∫–∞–Ω—Å–∏–∏ */}
                    <Box sx={{ flex: 2 }}>
                        <Typography variant="h5" gutterBottom fontWeight="bold">
                            {vacancy.post}
                        </Typography>
                        <Typography paragraph sx={{ whiteSpace: 'pre-line' }}>
                            {vacancy.description}
                        </Typography>
                        <Box sx={{ mt: 2 }}>
                            <Typography><strong>–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã:</strong> {vacancy.experience} –ª–µ—Ç</Typography>
                            <Typography><strong>–ó–∞—Ä–ø–ª–∞—Ç–∞:</strong> {salaryDisplay} ‚ÇΩ</Typography>
                            <Typography><strong>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</strong> {getEducationName(vacancy.education_id)}</Typography>
                            <Typography><strong>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</strong> {dayjs(vacancy.income_date).format('DD.MM.YYYY')}</Typography>
                        </Box>
                        <Box sx={{ mt: 2, display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                            {vacancy.activities?.map((act) => (
                                <Chip key={act.id} label={act.direction} sx={{
                                    bgcolor: '#e3f2fd',
                                    color: '#1976d2'
                                }} />
                            ))}
                        </Box>
                    </Box>
                </Box>
            </Paper>

            {/* –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" —Ç–æ–ª—å–∫–æ –¥–ª—è Worker */}
            {userRole === 'Worker' &&
                (

                    <Paper elevation={3} sx={{ p: 3, mb: 4, borderRadius: 3 }}>
                        <Typography variant="h6" gutterBottom fontWeight="bold">
                            üìù –û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è
                        </Typography>
                        <FormControl fullWidth>
                            <InputLabel id="resume-select-label">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ</InputLabel>
                            <Select
                                labelId="resume-select-label"
                                value={selectedResume}
                                onChange={(e) => setSelectedResume(e.target.value)}
                                label="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—é–º–µ"
                            >
                                {myResumes.map(resume => (
                                    <MenuItem key={resume.id} value={resume.id}>
                                        <Box>
                                            <Typography variant="body2" fontWeight="bold">
                                                {resume.post || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                                            </Typography>
                                            <Typography variant="caption">
                                                –û–ø—ã—Ç: {resume.experience ?? '‚Äî'} –ª–µ—Ç
                                            </Typography>
                                            <Typography variant="caption">
                                                –ñ–µ–ª–∞–µ–º–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞: {resume.wantedSalary ?? '‚Äî'} ‚ÇΩ
                                            </Typography>
                                        </Box>
                                    </MenuItem>
                                ))}
                            </Select>
                        </FormControl>
                        <Button
                            variant="contained"
                            color="primary"
                            fullWidth
                            onClick={() => handleRespond(selectedResume, vacancy.id)}
                            sx={{ py: 1.2 }}
                            disabled={!selectedResume}
                        >
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫
                        </Button>
                    </Paper>
                )
            }

            <Button onClick={() => navigate(-1)}>‚Üê –ù–∞–∑–∞–¥</Button>

            {/* Snackbar */}
            <Snackbar open={snackbar.open} autoHideDuration={3000} onClose={() => setSnackbar(prev => ({ ...prev, open: false }))}>
                <Alert severity={snackbar.severity}>{snackbar.message}</Alert>
            </Snackbar>
        </Container>
    );
}