// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WorkerService.DAL.Data;

#nullable disable

namespace WorkerService.DAL.Migrations
{
    [DbContext(typeof(WorkerDbContext))]
    [Migration("20251020164302_SchemeV2")]
    partial class SchemeV2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Delivered");

                    b.ToTable("InboxState");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("SequenceNumber");

                    b.HasIndex("EnqueueTime");

                    b.HasIndex("ExpirationTime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique();

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique();

                    b.ToTable("OutboxMessage");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("OutboxId");

                    b.HasIndex("Created");

                    b.ToTable("OutboxState");
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Education", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Education");

                    b.HasData(
                        new
                        {
                            id = 1,
                            name = "Начальное общее образование"
                        },
                        new
                        {
                            id = 2,
                            name = "Основное общее образование"
                        },
                        new
                        {
                            id = 3,
                            name = "Среднее общее образование"
                        },
                        new
                        {
                            id = 4,
                            name = "Среднее профессиональное образование"
                        },
                        new
                        {
                            id = 5,
                            name = "Бакалавриат"
                        },
                        new
                        {
                            id = 6,
                            name = "Специалитет"
                        },
                        new
                        {
                            id = 7,
                            name = "Магистратура"
                        },
                        new
                        {
                            id = 8,
                            name = "Аспирантура"
                        },
                        new
                        {
                            id = 9,
                            name = "Ординатура"
                        });
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Resume", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("education_id")
                        .HasColumnType("integer");

                    b.Property<int>("experience")
                        .HasColumnType("integer");

                    b.Property<DateTime>("income_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("post")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("skill")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("wantedSalary")
                        .HasColumnType("integer");

                    b.Property<Guid>("worker_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("education_id");

                    b.HasIndex("worker_id");

                    b.ToTable("Resume");
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Resume_filter", b =>
                {
                    b.Property<Guid>("filter_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("resume_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("typeOfActivity_id")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("filter_id");

                    b.HasIndex("resume_id", "typeOfActivity_id")
                        .IsUnique();

                    b.ToTable("Resume_filter");
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Worker", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(450)
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("birthday")
                        .HasColumnType("date");

                    b.Property<string>("first_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("second_name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Worker");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null)
                        .WithMany()
                        .HasForeignKey("OutboxId");

                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.InboxState", null)
                        .WithMany()
                        .HasForeignKey("InboxMessageId", "InboxConsumerId")
                        .HasPrincipalKey("MessageId", "ConsumerId");
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Resume", b =>
                {
                    b.HasOne("WorkerService.DAL.Entities.Education", "education")
                        .WithMany("resumes")
                        .HasForeignKey("education_id")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WorkerService.DAL.Entities.Worker", "worker")
                        .WithMany("Resumes")
                        .HasForeignKey("worker_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("education");

                    b.Navigation("worker");
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Resume_filter", b =>
                {
                    b.HasOne("WorkerService.DAL.Entities.Resume", "resume")
                        .WithMany("resume_filters")
                        .HasForeignKey("resume_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("resume");
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Education", b =>
                {
                    b.Navigation("resumes");
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Resume", b =>
                {
                    b.Navigation("resume_filters");
                });

            modelBuilder.Entity("WorkerService.DAL.Entities.Worker", b =>
                {
                    b.Navigation("Resumes");
                });
#pragma warning restore 612, 618
        }
    }
}
